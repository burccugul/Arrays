
public class ArrayUtil {
	
	 
	public void ArrayDemo() {
		
		int[] myArray = new int[5];
		myArray[0] = 5;
		myArray[1] = 6;
		myArray[2] = 9;
		myArray[3] = 2;
		myArray[4] = 4;
		printArray(myArray);
	}
	
	public static void printArray(int[]arr) {
		
		int n = arr.length;
		for(int i = 0; i<n; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
	
	public static int[] removeEven(int [] arr) {
		
		int oddCount = 0;
		for(int i = 0; i<arr.length; i++) {
			if(arr[i] % 2 != 0) {
				oddCount++;
			}
		}
		int [] result = new int [oddCount];
		int index = 0;
		for(int i = 0; i<arr.length; i++) {
			if(arr[i] %2 != 0) {
				result[index] = arr[i];
				index++;
			}
		}
		return result;
	}
	
	public static void reverse(int []arr , int start, int end) {
		
		while(start<end) {
			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
			start++;
			end--;
			
		}
	}
	
	public int findMin(int [] arr) {
		
		if(arr == null || arr.length == 0){
			throw new IllegalArgumentException();
		}
		int min =arr[0];
		for(int i = 1; i<arr.length; i++) {
			if(arr[i] < min) {
				min = arr[i];
			}
		}
		return min;
	}
	
	public int findSecondMax(int [] arr) {
		
		int max  = arr[0];
		int secondMax = arr[0];
		for(int i = 1; i< arr.length; i++) {
			if(arr[i]> max) {
				secondMax = max;
				max = arr[i];
				}
			else if(arr[i] > secondMax && arr[i] != max){
				secondMax = arr[i];
			}
		}
		return secondMax;
	}
	
	public void moveZero(int [] arr) {
		
		int j = 0; //focus zeros
		for(int i = 0; i<arr.length; i++) { //focus non zeros
			if(arr[i] != 0 && arr[j] == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			if(arr[j] != 0) {
				j++;
			}
		}
		
	}
	
	public int [] resize(int [] arr, int capacity) {
		
		int [] temp = new int [capacity];
		for(int i = 0; i<arr.length; i++) {
			temp[i] = arr[i];
		}
		return temp;
	}
	
	public int findMissingNumber(int [] arr) {
		
		int n = arr.length + 1;
		int sum = n*(n+1)/2;
		for(int num : arr) {
			sum = sum-num;
		}
		return sum;
	}
	
	public boolean isPalindrom(String word) {
		
		char [] charArray = word.toLowerCase().toCharArray();
		int start = 0;
		int end = word.length()-1;
		while(start < end) {
			if(charArray[start] != charArray[end]) {
				return false;
			}
			start ++;
			end --;
		}
		return true;
	}
	
	public static void main(String[] args) {
		
		ArrayUtil arrayUtil = new ArrayUtil();
		arrayUtil.ArrayDemo();
		
		printArray(new int []{1,3,5,7,9});
		
		int [] arr = {3,2,4,7,10,6,5};
		printArray(arr);
		
		reverse(arr,0,arr.length-1);
		printArray(arr);
		
		int [] result = removeEven(arr);
		printArray(result);
		
		System.out.println("Min: " + arrayUtil.findMin(result));
		
		int [] arr1 = {3,2,4,7,10,6,5};
		System.out.println("Max: " + arrayUtil.findSecondMax(arr1));

		int [] arr2 = {0,6,8,0,3,0,2,5};
		arrayUtil.moveZero(arr2);
		printArray(arr2);
		
		arr2 = arrayUtil.resize(arr2, 10);
		System.out.println("Resized length: " + arr2.length);
		
		int [] arr3 = {2,4,1,8,6,7,3};
		System.out.println("Missing number: " + arrayUtil.findMissingNumber(arr3));
		
		if(arrayUtil.isPalindrom("That")) {
			System.out.println("String is palindrom.");
		}else {
			System.out.println("String is not palindrom.");

		}
	}

}
